#!/usr/bin/env ruby

# Config
ART_FORMATS = ['jpg', 'png']
VERBOSE = ARGV.include?('--verbose')

# Follow symlinks to find the original file.
def real_file(file)
	file = File.expand_path(file)

	while File.symlink?(file)
		file = File.expand_path(File.readlink(file), File.dirname(file))
	end

	file
end

# Move in to the real folder so we can load plugins and libs.
real_dir = File.dirname(real_file(__FILE__))
Dir.chdir(real_dir)

# Global Gems
require 'rubygems'
require 'librmpd'

# Local non-plugin helpers
$LOAD_PATH << 'lib'

# The MusicMonitor Module
module MusicMonitor
	# Simple debug outputter
	def debug(message, newline=true)
		if VERBOSE
			if newline
				if message.respond_to? :to_str
					puts message
				else
					p message
				end
			else
				print message
			end

			$stdout.flush
		end
	end
end

# This might get some default methods later, but for now,
# it's just used when detecting plugins.
class MusicMonitor::Plugin; end

# Moniters MPD, and when the song changes,
# it calls plugin hooks.
#
class MusicMonitor::App
	include MusicMonitor

	def initialize(server='localhost', port=6600)
		Thread.abort_on_exception = true

		# Set status variables
		@song = {}
		@elapsed = 0

		# Connect to MPD
		debug 'Connecting to MPD... ', false
		$stdout.flush
		@mpd = MPD.new server, port
		@mpd.connect
		@last_state = @mpd.status['state']
		debug 'Done'

		# Auto-load plugins
		debug 'Searching for plugins...', false
		Dir.glob('plugins/*.rb').each do |f|
			require f
		end
		debug 'Done'

		@plugins = []

		# Find plugins and initialize them.
		debug 'Initializing plugins...'
		ObjectSpace.each_object(Class) do |c|
			if c.superclass == MusicMonitor::Plugin
				@plugins << c.new
			end
		end
		debug "Done initialization\n\n"
	end

	# Check if the song or state changed and run
	# routine plugin hooks.
	def update
		new_song = @mpd.current_song

		if new_song != @last_song
			song_changed @mpd.current_song
		end

		# Only run if connected to mpd
		unless @song.empty?

			new_state = @mpd.status['state']
			if @last_state != new_state
				state_changed new_state 
			end

			run_hooks_for :update, @song, @elapsed
		end
	end

	# Run forever
	def run
		delay = 2 # Interval at which the loop code is run, in seconds.

		loop do
			update
			sleep delay

			# Increment the elapsed clock based on the sleep time
			@elapsed += delay
		end
	end

	# Callback for state changes; play, pause, etc.
	def state_changed(state)
		debug state
		@last_state = @mpd.status['state']
		now_playing if state == 'play' and @song
	end

	# Callback for song changes
	def song_changed(song)
		if song and song != @song
			@last_song = @song
			@song = song

			# Set @elapsed to the current song position in case
			# MusicMonitor was started during an already playing song.
			#
			# In other cases, this still should be safe to use as when
			# starting a new track, the current position should be zero.
			@elapsed = @mpd.status['time'].split(':')[0].to_i

			run_hooks_for :song_changed, @song

			# Send notifications
			now_playing
		end
	end

	# Helper method for displaying the current song
	def now_playing
		if @song.title
			title = @song.title
		else
			# Find the file's extension
			@song.file =~ /(\.[^\.]+$)/
			# ...and remove everything but the main filename
			title = File.basename(@song.file, $1)
		end

		run_hooks_for :notify, title, @song
	end

	# Helper to run all the hooks for a method.
	def run_hooks_for(method, *args)
		@plugins.each do |p|
			p.send(method, *args) if p.respond_to? method
		end
	end
end

# Create and run MusicMonitor
MusicMonitor::App.new.run
