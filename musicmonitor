#!/usr/bin/env ruby

require 'rubygems'
require 'librmpd'
require 'scrobbler'
require 'amazon/aws/search'
include Amazon::AWS
include Amazon::AWS::Search

ART_FORMATS = ['jpg', 'png']

DEBUG = true

# Downloads album art from Amazon
class FetchAlbumArt
	attr_reader :file

	def initialize(album, artist, opts={})
		default_opts = {
			# Where your album art is stored
			:art_folder => '~/.albumart/',
			# Location of your Amazon Developer's Key
			:amazon_key_path => '~/.amazonkey',
			# Formats that this script will recognise and try to use
			:art_formats => ['jpg', 'png'],
			# Valid names for art files
			:possible_filenames => [album+' - '+artist, album]
		}

		# Set default options, but have user-set options
		# overwrite the defaults.
		opts = default_opts.merge(opts)

		# Expand paths to absolute paths
		art_folder = File.expand_path(opts[:art_folder]) + '/'
		amazon_key_path = File.expand_path(opts[:amazon_key_path])

		# Loop through possible file names and accepted formats,
		# and exit if the artwork already exists.
		opts[:possible_filenames].each do |filename|
			opts[:art_formats].each do |ext|
				filename = filename.gsub(/[\/\\]/, '_')
				@file = "#{art_folder}#{filename}.#{ext}"
				return if File.exists? @file
			end
		end

		# Load your Amazon Key
		if File.exists? amazon_key_path
			File.open(amazon_key_path, 'r').each do |l|
				@amazon_key = l.chomp
			end
		end

		if !@amazon_key
			puts "Missing Amazon Developer's key, can't get artwork."
			return
		end

		# Setup query
		query = ItemSearch.new('Music', { 'Title' => album, 'Artist' => artist })
		rgroup = ResponseGroup.new(:Images)
		request = Request.new(@amazon_key)

		# Query Amazon
		begin
			response = request.search(query, rgroup)
		rescue
			@file = nil
			return
		end

		# Get the url of the image
		begin
			url = response.item_search_response.items[0].item[0].large_image.url
		rescue NoMethodError
			return
		end

		# Download the image
		data = Net::HTTP.get_response(URI.parse(url))

		# Save the image
		File.open(@file, 'wb') do |f| 
			f << data.body
			f.flush
		end
	end
end

# Code copied from Scrobbler 0.2.2
# <http://scrobbler.rubyforge.org/>
module Scrobbler
	class SimpleAuth

		# Override to enable authentication using pre-hashed passwords.
		# Won't work if a user's un-hashed password looks a hash.
		def handshake!
			# Begin edits
			require 'digest/md5'

			if @password =~ /^[0-9a-f]{32}$/i
				password_hash = @password
			else
				password_hash = Digest::MD5.hexdigest(@password)
			end
			# End edits

			timestamp = Time.now.to_i.to_s
			token = Digest::MD5.hexdigest(password_hash + timestamp)

			query = { :hs => 'true',
					  :p => AUTH_VER,
					  :c => @client_id,
					  :v => @client_ver,
					  :u => @user,
					  :t => timestamp,
					  :a => token }
			result = @connection.get('/', query)

			@status = result.split(/\n/)[0]
			case @status
			when /OK/
				@session_id, @now_playing_url, @submission_url = result.split(/\n/)[1,3]
			when /BANNED/
				raise BannedError # something is wrong with the gem, check for an update
			when /BADAUTH/
				raise BadAuthError # invalid user/password
			when /FAILED/
				raise RequestFailedError, @status
			when /BADTIME/
				raise BadTimeError # system time is way off
			else
				raise RequestFailedError
			end
		end
	end
end

class String
	def escape_single_quote
		self.gsub(/'/, "'\\\\\''")
	end
end

# Moniters MPD, and when the song changes,
# it displays a Growl notification.
#
# It can also scrobble to last.fm.
#
class MusicMonitor
	def initialize(server='localhost', port=6600, lastfm_config='~/.lastfm')
		Thread.abort_on_exception = true

		# Set status variables
		@song = nil
		@elapsed = 0
		@scrobbles = []
		@lastfm_playing_sent = false
		@lastfm_can_scrobble = false

		# Connect to MPD
		debug 'Connecting to MPD... ', false
		$stdout.flush
		@mpd = MPD.new server, port
		@mpd.connect
		@last_state = @mpd.status['state']
		debug 'Done'

		# Setup Growl
		@default_icon = '/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/ToolbarMusicFolderIcon.icns'

		# Load last.fm credentials
		debug 'Loading last.fm config... ', false
		lastfm_config = File.expand_path(lastfm_config)
		if File.exists? lastfm_config
			lines = []

			File.open(lastfm_config, 'r').each do |l|
				lines << l.chomp
			end

			lastfm_user = lines[0]
			lastfm_pass = lines[1]
		else
			puts 'Missing last.fm credentials at ' + lastfm_config
		end

		debug 'Done'

		# Connect to last.fm
		Thread.new do
			debug 'Connecting to last.fm... ', false
			@lastfm = Scrobbler::SimpleAuth.new(:user => lastfm_user, :password => lastfm_pass)
			@lastfm.handshake!
			debug @lastfm.status
		end
	end

	# Simple debug output
	def debug(message, newline=true)
		if DEBUG
			if newline
				if message.respond_to? :to_str
					puts message
				else
					p message
				end
			else
				print message
			end

			$stdout.flush
		end
	end

	def update
		new_song = @mpd.current_song

		if new_song != @last_song
			song_changed @mpd.current_song
		end

		# Only run if connected to mpd
		if @song

			new_state = @mpd.status['state']
			state_changed new_state if @last_state != new_state

			# Only scrobble if connected to last.fm
			if @lastfm and @lastfm.status == 'OK'

				# Only scrobble tracks that are longer than 30 seconds.
				if @song.time.to_i > 30

					# Don't send multiple times, or if we haven't played more
					# than the @scrobble_time.
					if !@lastfm_can_scrobble and (@scrobble_time - @elapsed) <= 0

						@scrobbles.push lastfm_scrobble

						# Scrobbles aren't sent immediately,
						# they're sent when the song changes.

						@lastfm_can_scrobble = true
					end
				end

				# Don't send multiple times
				if !@lastfm_playing_sent
					lastfm_play
					@lastfm_playing_sent = true
				end
			end

			@last_state = @mpd.status['state']
		end
	end

	# Run forever
	def run
		delay = 2 # Interval at which the loop code is run, in seconds.

		loop do
			update
			sleep delay

			# Increment the elapsed clock based on the sleep time
			@elapsed += delay
		end
	end

	# Callback for state changes; play, pause, etc.
	def state_changed(state)
		now_playing if state == 'play' and @song
	end

	# Callback for song changes
	def song_changed(song)
		@last_song = @song
		@song = song

		if @song
			# Reset temporary song variables
			@lastfm_playing_sent = false
			@lastfm_can_scrobble = false
			@scrobble_time = [@song.time.to_i / 2, 240].min
			@started_playing = Time.new

			# Set @elapsed to the current song position in case
			# MusicMonitor was started during an already playing song.
			#
			# In other cases, this still should be safe to use as when
			# starting a new track, the current position should be zero.
			@elapsed = @mpd.status['time'].split(':')[0].to_i

			submit_scrobbles

			# Get album art
			art = FetchAlbumArt.new @song.album, @song.artist
			@icon = (art.file) ? art.file : @default_icon

			# Send notifications
			now_playing
		end
	end

	# Scrobble queued tracks
	def submit_scrobbles
		if @lastfm and @lastfm.status == 'OK'
			@scrobbles.each do |scrobble|
				debug "Submit #{scrobble}"
				scrobble.submit!
				@scrobbles.delete(scrobble)
			end
		end
	end

	# Helper method for displaying the current song
	def now_playing
		if @song.title
			title = @song.title
		else
			# Find the file's extension
			@song.file =~ /(\.[^\.]+$)/
			# ...and remove everything but the main filename
			title = File.basename(@song.file, $1)
		end

		message = @song.album + ' - ' + @song.artist
		notify title, message
	end

	# Send a notification to the messaging system. In this case, Growl.
	def notify(title, message='', icon=@icon)
		escaped_title = title.escape_single_quote
		escaped_message = message.escape_single_quote

		command = "growlnotify '#{escaped_title}' -m '#{escaped_message}' --image '#{icon}' -n '#{self.class.name}'"
		`#{command}`
	end

	# Tell last.fm what's playing.
	def lastfm_play
		playing = Scrobbler::Playing.new(
			:session_id => @lastfm.session_id,
			:now_playing_url => @lastfm.now_playing_url,
			:artist => @song.artist,
			:track => @song.title,
			:album => @song.album,
			:length => @song.time,
			:track_number => @song.track
		)

		# Send now playing information immediately
		playing.submit!
		playing
	end

	# Create a Scrobbler::Scrobble object
	def lastfm_scrobble
		Scrobbler::Scrobble.new(:session_id => @lastfm.session_id,
								:submission_url => @lastfm.submission_url,
								:artist => @song.artist,
								:track => @song.title,
								:album => @song.album,
								:time => @started_playing,
								:length => @song.time,
								:track_number => @song.track)
	end
end

MusicMonitor.new.run
